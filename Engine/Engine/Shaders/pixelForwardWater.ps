#include "CommonPixel.ps"

Texture2D Texture[7];	    // normal, specular, UVDVMap, shadowMap, reflectionMap, refractionMap, refractionDepth
SamplerState SampleType[2]; // wrap,clamp 	

static float darkenOcludedPercent = 0.4;
static float highlightStrength = 2.0;
static float4 waterColorTint = float4(0.0, 0.3, 0.1, 1.0);
static float tintStrength = 0.2;
static float distortionDamping = 0.012;
static float reflectivePower = 0.9;
static float nearPlane = 0.1;
static float farPlane = 5000.0;
static float fadeToDepth = 3.0f;
static float normalScrollStrength = - 0.2;
static bool applyFoam = false;
static float4 foamColor = float4(1,1,1,0.2);
static float foamToDepth = 1.0;
static float foamDistortStrength = 0.7;

cbuffer AmbientDirectionalBuffer : register(b0)
{
	float4 ambientColor;
	float4 dirDiffuseColor;
	float3 dirLightDirection;
}

cbuffer PointLightBuffer : register(b1)
{
	PointLight pointLights[1024];
};

struct PixelInputType
{
    float4 position            : SV_POSITION;
    float2 texCoord            : TEXCOORD0;
	float3 normal              : NORMAL;
	float3 tangent             : TANGENT;
	float3 binormal            : BINORMAL;
	float3 vertexToCamera      : TEXCOORD1;
	float4 positionLightSpace  : TEXCOORD2;
	float3 worldPos            : TEXCOORD3;
	float4 vertexColor         : COLOR;
	float4 reflectionPosition  : TEXCOORD4;
	float4 positionCameraSpace : TEXCOORD5;
	float2 texCoordOffset      : TEXCOORD6;
};

float3 GetDirectionalColor(PixelInputType input, float3 baseColor, float3 bumpNormal, float4 specularMap)
{		
	// get light intensity
    float lightIntensity = saturate(dot(bumpNormal.xyz, dirLightDirection)); 
	
	// get color based on texture, intensity and color of light
    float3 color = (baseColor * dirDiffuseColor.rgb) * lightIntensity; 
	
	// normalize vertex to camera
	float3 vtcNormalized = normalize(input.vertexToCamera);
	
	// get specular if hit by light
	float3 specular = float3(0,0,0);
	if (lightIntensity > 0)
		specular = GetSpecularColorPhong(vtcNormalized, dirLightDirection, dirDiffuseColor, lightIntensity, bumpNormal, specularMap);
			
	return color + ((dirDiffuseColor * specular) * highlightStrength); 
}

float3 GetPointColor(PixelInputType input, float3 baseColor, float3 bumpValues, float4 specularMap)
{   
	float4 finalColor = float4(0,0,0,1);
	int numLights = pointLights[0].numLights;
	float3 vtcNormalized = normalize(input.vertexToCamera);
	for (int i =0; i < numLights; i++)		
		finalColor += GetPointLightColor2(pointLights[i], input.worldPos, vtcNormalized, float4(baseColor.rgb, 1.0), bumpValues, specularMap, true);
     
    return finalColor;
}

float4 GetReflectionColor(PixelInputType input, float2 distortion)
{
	float2 reflectionTexCoords = GetProjectiveTexCoords(input.reflectionPosition);
	
	return Texture[4].Sample(SampleType[1], clamp(reflectionTexCoords + distortion, 0.001, 0.999));
}

float4 GetRefractionColor(PixelInputType input, float2 distortion)
{
	float2 refractionTexCoords = GetProjectiveTexCoords(input.positionCameraSpace);
	
	return Texture[5].Sample(SampleType[1], clamp(refractionTexCoords + distortion, 0.001, 0.999));
}

float GetWaterDepth(PixelInputType input, float2 sampleOffset)
{	
	float2 texCoords = GetProjectiveTexCoords(input.positionCameraSpace);

	float bottomDepth  = Texture[6].Sample(SampleType[1], texCoords + sampleOffset).r;

	// convert depth values to linear distances
	float bottomDistance  = 2.0 * nearPlane * farPlane / (farPlane + nearPlane - (2.0 * bottomDepth - 1.0) * (farPlane - nearPlane));
	float surfaceDistance = 2.0 * nearPlane * farPlane / (farPlane + nearPlane - (2.0 * input.position.z - 1.0) * (farPlane - nearPlane));

	return bottomDistance - surfaceDistance;
}

float InverseLerp(float a, float b, float t)
{
	return saturate((t - a) / (b - a));
}

float4 Main(PixelInputType input) : SV_TARGET
{
	// sample the UVDV map to get refraction amount
	float2 distortionMap = (Texture[2].Sample(SampleType[0], input.texCoord + input.texCoordOffset).rg * 2.0 -1.0) * distortionDamping;

	// add the distortion amount to the regular texCoords for sampling normal and specular maps
	float2 distortedTexCoords = input.texCoord + distortionMap;
	float4 normalMap    = Texture[0].Sample(SampleType[0], distortedTexCoords + (input.texCoordOffset * normalScrollStrength));
	float4 specularMap  = Texture[1].Sample(SampleType[0], distortedTexCoords + (input.texCoordOffset * normalScrollStrength));
	
	// convert normalmap sample to range -1 to 1
	normalMap = (normalMap * 2.0) -1.0;
	
	// get normal in worldspace
    float3x3 tangentSpaceMatrix = float3x3(input.tangent,input.binormal,input.normal);	
    float3 bumpNormal           = normalize(mul(normalMap, tangentSpaceMatrix));  

	// get the colors from the projected reflection and distortion maps
	float4 reflectionColor = GetReflectionColor(input, distortionMap);
	float4 refractionColor = GetRefractionColor(input, distortionMap);

	// get the amount of reflective/transparency based on the fresnel effect
	float fresnelDot = saturate(dot(float3(0, 1, 0), normalize(input.vertexToCamera))); 
	fresnelDot = pow(fresnelDot, reflectivePower);

	// set the mix of reflection color and refraction color
	float4 colorMix = lerp(reflectionColor, refractionColor, fresnelDot);
	colorMix = lerp (colorMix, waterColorTint, tintStrength);	
	
	// get how much this pixel is ocluded
	float lightPercent = GetShadowLightFraction(Texture[3], SampleType[1], input.positionLightSpace, 0.00001);
	
	// get the minimum color value if the pixel is 100% ocluded
	// and the leftover color that will represent if the pixel is fully luminated
	float3 ocludedColor   = colorMix * (1 - darkenOcludedPercent);
	float3 fullLightColor = (colorMix * darkenOcludedPercent) * lightPercent;
	
	// get the specular highlights for the water surface
	float3 directionalColor = GetDirectionalColor(input, fullLightColor, bumpNormal, specularMap) * lightPercent;
	float3 pointColor       = GetPointColor(input, fullLightColor, bumpNormal, specularMap);
	
	float4 finalColor = float4(0,0,0,1);
	finalColor.rgb = ocludedColor + directionalColor + pointColor; 
		
	float waterDepth = 0;

	// add foam to certain water depth
	if (applyFoam)
	{
		waterDepth = GetWaterDepth(input, distortionMap * foamDistortStrength);
		finalColor = lerp(foamColor, finalColor, InverseLerp(0.0, foamToDepth, waterDepth));
		return finalColor;	
	}	

	// get the linear depth of the water and fade water edges starting 
	// at fully transparent and ending with 100 % opaque at set depth value
	waterDepth         = GetWaterDepth(input, float2(0,0));
	float fadeStrength = InverseLerp(0.0, fadeToDepth, waterDepth);	
	finalColor.a       = lerp(0.0, 1.0, fadeStrength);

	return finalColor;
}






