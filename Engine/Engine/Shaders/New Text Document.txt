// the constant buffer for uppdating the matrices, get set from the shaderManager

cbuffer MatrixBuffer
{
    matrix worldMatrix;
    matrix viewMatrix;
    matrix projectionMatrix;
};


 cbuffer CameraBuffer
{	
    float3 cameraPosition;
	float padding2;	
};


struct VertexInputType
{
    float4 position : POSITION;
    float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
};

struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
	float3 viewDirection : TEXCOORD1;
};


// the vertexshader itself, takes a vertextype as input and returns a vector4


PixelInputType TextureVertexShader(VertexInputType input)
{
    PixelInputType output;
	float4 worldPosition;
    
    // Change the position vector to be 4 units for proper matrix calculations.
    input.position.w = 1.0f;
	
    // Calculate the position of the vertex against the world, view, and projection matrices.
	// mul = matrix multiplication, multiply the lefthand by the righthand

    output.position = mul(input.position, worldMatrix); // takes the position of our vertices and multiply with the worldmatrix
    output.position = mul(output.position, viewMatrix); // next step we take the result from the last step and multiply with the viewmatrix
    output.position = mul(output.position, projectionMatrix); // last step is to transform the viewmatrix to our 2d screen space 
    
	// take the normal vector and convert into woorld coords
	output.normal = mul(input.normal, (float3x3)worldMatrix);
	
    // Normalize the normal vector.
    output.normal = normalize(output.normal);

	// Store the texture coordinates for the pixel shader.
    output.tex = input.tex;
	
    // calculations for specular below, get the worldposition of the vertex and calculate the direction to the camera
	worldPosition = mul(input.position, worldMatrix);
	output.viewDirection = cameraPosition.xyz - worldPosition.xyz;
	output.viewDirection = normalize(output.viewDirection);
    
    return output;
}


























Texture2D shaderTexture;	// the texture that we will use for rendering, we will set this in setshaderparameters
SamplerState SampleType;	// description of how we are going to use the texture, set in initialize shader function
 


 cbuffer LightBuffer
 {
	float4 ambientColor;
	float4 diffuseColor;
	float3 lightDirection;
	float specularPower;
	float4 specularColor;

 }
 

struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
	float3 viewDirection : TEXCOORD1;
	
};


float4 TexturePixelShader(PixelInputType input) : SV_TARGET
{
  
    float4 textureColor;
    float3 lightDir;
    float lightIntensity;
    float4 color;
	float3 reflection;
	float4 specular;
		   
    textureColor = shaderTexture.Sample(SampleType, input.tex); 
	
    color = ambientColor;
	
	specular = float4(0.0f, 0.0f, 0.0f, 0.0f);
       
    lightDir = -lightDirection;
   
    lightIntensity = saturate(dot(input.normal, lightDir));

    if(lightIntensity > 0.0f)
    {
        
        color += (diffuseColor * lightIntensity);     
        color = saturate(color);
		
		// get the reflection vector from the normal and lightdirection
		reflection = normalize(2 * lightIntensity * input.normal - lightDir);
		
		specular = pow(saturate(dot(reflection, input.viewDirection)),specularPower);
                 
    }
   
    color = color * textureColor;
	color = saturate(color + specular);
     
    return color;
	

	
    
}










