
Texture2D Texture[5]; // shadowmap, position, normal, diffuse, specular	
SamplerState SampleType[2]; // wrap,clamp 	
 
 struct PointLight
{
	float3 positionPoint;
	float radiusPoint;
	float3 colorPoint;
	float intensityPoint;
	float3 specularColorPoint;
	float specularPowerPoint;
	float attConstantPoint;
	float attLinearPoint;
	float attExponentialPoint;
	int numLightsPoint;
};

cbuffer AmbientBuffer : register(b0)
{
	float4 ambientColor;
	float4 cameraPosition;
};

cbuffer DirectionalBuffer : register(b1)
{
	float4x4 lightViewProj;
	float4 lightColorDir;	
	float4 specularColorDir;	
	float3 lightDirectionDir;
	float  specularPowerDir;	
};

cbuffer PointLightBuffer : register(b2)
{
	PointLight pointLights[25];
};

struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;		
};


float4 Main(PixelInputType input) : SV_TARGET
{            

	float4 color = Texture[2].Load(int3(input.position.xy,0));
   return color;// * ambientColor;	   
}