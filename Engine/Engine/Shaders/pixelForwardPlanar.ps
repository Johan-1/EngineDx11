#include "CommonPixel.ps"

Texture2D Texture[6];	    // diffuse, normal, specular, emissive, shadowMap, reflectionMap
SamplerState SampleType[2]; // wrap,clamp 	

cbuffer AmbientDirectionalBuffer : register(b0)
{
	float4 ambientColor;
	float4 dirDiffuseColor;
	float3 dirLightDirection;
}

cbuffer PointLightBuffer : register(b1)
{
	PointLight pointLights[1024];
};

cbuffer ReflectionBuffer : register(b2)
{
	float reflectiveFraction;
}

struct PixelInputType
{
    float4 position           : SV_POSITION;
    float2 texCoord           : TEXCOORD0;
	float3 normal             : NORMAL;
	float3 tangent            : TANGENT;
	float3 binormal           : BINORMAL;
	float3 vertexToCamera     : TEXCOORD1;
	float4 positionLightSpace : TEXCOORD2;
	float3 worldPos           : TEXCOORD3;
	float4 vertexColor        : COLOR;
	float4 reflectionPosition : TEXCOORD4;
};

float3 GetBaseColor(PixelInputType input, float3 diffuseColor)
{
	return (diffuseColor * input.vertexColor.rgb) * ambientColor.rgb;
}

float3 GetDirectionalColor(PixelInputType input, float3 textureColor, float3 bumpNormal, float4 specularMap)
{
	// get how much the pixel is occluded
	float lightPercent = GetShadowLightFraction(Texture[4], SampleType[1], input.positionLightSpace, 0.00001);
	
	// return no light if completely occluded
	if(lightPercent == 0)
		return float4(0,0,0,0);
	
    // get light intensity 	
    float lightIntensity = saturate(dot(bumpNormal.xyz, dirLightDirection)); 
	
	float3 vtcNormalized = normalize(input.vertexToCamera);
	// get color based on texture, intensity and color of light
    float3 color = (textureColor * input.vertexColor.rgb * lightIntensity * dirDiffuseColor.rgb) * lightPercent; 
			
	return color + GetSpecularColorPhong(vtcNormalized, dirLightDirection, dirDiffuseColor, lightIntensity, bumpNormal, specularMap);
}

float3 GetPointColor(PixelInputType input, float4 textureColor, float3 bumpNormal, float4 specularMap)
{   
	float4 finalColor = float4(0,0,0,1);
	int numLights = pointLights[0].numLights;
	float3 vtcNormalized = normalize(input.vertexToCamera);
	for (int i =0; i < numLights; i++)		
		finalColor += GetPointLightColor2(pointLights[i], input.worldPos, vtcNormalized, textureColor, bumpNormal, specularMap, true);
     
    return finalColor;
}

float4 GetReflectionColor(PixelInputType input)
{
	float2 reflectionTexCoords;
	
	// get the projected texture coordinates so we can sample the reflection map
	reflectionTexCoords.x =  input.reflectionPosition.x / input.reflectionPosition.w / 2.0f + 0.5f;
    reflectionTexCoords.y = -input.reflectionPosition.y / input.reflectionPosition.w / 2.0f + 0.5f;
	
	return Texture[5].Sample(SampleType[0], reflectionTexCoords);
}

float4 Main(PixelInputType input) : SV_TARGET
{	
	float4 textureColor = Texture[0].Sample(SampleType[0], input.texCoord);		
	float4 normalMap    = Texture[1].Sample(SampleType[0], input.texCoord);
	float4 specularMap  = Texture[2].Sample(SampleType[0], input.texCoord);
	
	// convert normalmap sample to range -1 to 1
	normalMap = (normalMap * 2.0) -1.0;
	
	// get normal in worldspace
    float3x3 tangentSpaceMatrix = float3x3(input.tangent,input.binormal,input.normal);	
    float3 bumpNormal           = normalize(mul(normalMap, tangentSpaceMatrix));  

	float4 reflectionColor  = GetReflectionColor(input);
	float3 baseColor        = GetBaseColor(input, textureColor.rgb);
	float3 directionalColor = GetDirectionalColor(input, textureColor.rgb, bumpNormal, specularMap);
	float3 pointColor       = GetPointColor(input, textureColor, bumpNormal, specularMap);
	
	float reflectFraction = reflectiveFraction;
	
	float3 finalColor = baseColor + directionalColor + pointColor; 
	finalColor = lerp(finalColor, reflectionColor, reflectFraction);
	
	return float4(finalColor.rgb, textureColor.a); 
}






