
Texture2D Textures[4];	// diffuse, normal, specular, shadowmap
SamplerState SampleType[2]; // wrap,clamp 	
 		
uniform	float4 u_lightColor;	
uniform	float4 u_specularColor;	
uniform	float3 u_lightDirection;
uniform	float  u_specularPower;

struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 texCoord : TEXCOORD0;
	float3 normal : NORMAL;
	float3 tangent : TANGENT;
	float3 binormal : BINORMAL;
	float3 vertexToCamera : TEXCOORD1;
	float4 positionLightSpace : TEXCOORD2;
	
};

float4 Main(PixelInputType input) : SV_TARGET
{				
	// do all shadow calculations first to decide if the pixel should be discarded or not
	float bias = 0.00001;
	float numInLight = 0;
	float lightPercent = 0;
	
	// get the projected texture coordinates based on the position in eye of the light
	float2 smTexCoord;
	smTexCoord.x = ((input.positionLightSpace.x / input.positionLightSpace.w) / 2.0) + 0.5;
	smTexCoord.y = ((-input.positionLightSpace.y / input.positionLightSpace.w) / 2.0) + 0.5;
				
	if((saturate(smTexCoord.x) == smTexCoord.x) && (saturate(smTexCoord.y) == smTexCoord.y))
	{
		float neighbour = 1 / 8192.0;	// hardcoded for now, dont forget to change if depthmap res change	
		float depthMapValues[9];
		
		depthMapValues[0] = Textures[3].Sample(SampleType[1], float2(smTexCoord.x, smTexCoord.y)).r; // middle
		depthMapValues[1] = Textures[3].Sample(SampleType[1], float2(smTexCoord.x - neighbour, smTexCoord.y)).r; // left
		depthMapValues[2] = Textures[3].Sample(SampleType[1], float2(smTexCoord.x - neighbour, smTexCoord.y - neighbour)).r; // top left
		depthMapValues[3] = Textures[3].Sample(SampleType[1], float2(smTexCoord.x, smTexCoord.y - neighbour)).r; // top
		depthMapValues[4] = Textures[3].Sample(SampleType[1], float2(smTexCoord.x + neighbour, smTexCoord.y - neighbour)).r; // top right
		depthMapValues[5] = Textures[3].Sample(SampleType[1], float2(smTexCoord.x + neighbour, smTexCoord.y)).r; // right
		depthMapValues[6] = Textures[3].Sample(SampleType[1], float2(smTexCoord.x + neighbour, smTexCoord.y + neighbour)).r; // bottom right
		depthMapValues[7] = Textures[3].Sample(SampleType[1], float2(smTexCoord.x, smTexCoord.y + neighbour)).r; // bottom 
		depthMapValues[8] = Textures[3].Sample(SampleType[1], float2(smTexCoord.x - neighbour, smTexCoord.y + neighbour)).r; // bottom left
		
		float lightDepthValue = (input.positionLightSpace.z / input.positionLightSpace.w) - bias;
		
		for(int i =0; i < 9; i++)
		{
			if( lightDepthValue <= depthMapValues[i])
				numInLight++;
		}
		
		if(numInLight == 0)
			discard;	
	}
	
	// get how many pixels that not was ocluded in range 0-1 
	lightPercent = numInLight / 9;
										  
	// sample from textures, multiply texturecolor with light percent to get blured shadow edges		
	float4 textureColor = Textures[0].Sample(SampleType[0], input.texCoord) * lightPercent;
	float4 bumpValues = Textures[1].Sample(SampleType[0],input.texCoord);
	
	// convert normalmap sample to range -1 to 1
	bumpValues = (bumpValues * 2.0) -1.0;
	
	// get tangentSpaceMatrix for normalmapping and multiply with normalmapsample to get the bumpnormal
	float3x3 tangentSpaceMatrix = float3x3(input.tangent,input.binormal,input.normal);	
	float3 bumpNormal = normalize(mul(bumpValues, tangentSpaceMatrix));   
	    		  					   		
    float lightIntensity = saturate(dot(bumpNormal, u_lightDirection)); 
	
	// get color based on texture, intensity and color of light
    float4 color = textureColor * lightIntensity * u_lightColor; 
	saturate(color);
	float4 specular = float4(0,0,0,0);
	
	// add specular effect if the light is affecting the pixel
	if(lightIntensity > 0)
	{
		
		float4 specularValue = Textures[2].Sample(SampleType[0],input.texCoord);
	
		//blinn phong
		//float3 half = normalize(u_lightDirection + input.vertexToCamera);		
		//float specularIntensity = pow( max( 0.0, dot( input.normal, half ) ), specularPower );
		//specular = specularColor * specularIntensity;
		
		//phong
		float3 reflection = normalize(2 * lightIntensity * input.normal - u_lightDirection);		
		float specularIntensity = pow(saturate(dot(reflection, input.vertexToCamera)),u_specularPower);
		specular = u_specularColor * specularIntensity;
		specular = specular	* specularValue;
	} 
			
	return (color += specular); 
	 				                            		   
}






